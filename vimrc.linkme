" Pathogen configuration
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()
    :autocmd!
"set terminal title and stifle shell messages
set title
set shortmess=atI

" Set default working directory
cd ~/code

set nohlsearch
set viminfo='100,f1

set autoindent
set cmdheight=2
set tags+=gems.tags
" Strewth, what a mess. Copied from the vim docs, if memory serves.
set comments=s:/*,mb:**,ex:*/,://,b:#,b:##,:%,:XCOMM,n:>,fb:-
set ignorecase
set formatoptions=orc
set history=1000

set undolevels=1000 "maximum number of changes that can be undone

set wildignore=*.swp,*.bak,*.pyc,*.class
set visualbell
set noerrorbells
set nobackup
set noswapfile
set hlsearch
set incsearch
set keywordprg=
set mouse=a
set mousehide
set mousemodel=popup_setpos
set nowrapscan
set wrap
set linebreak
set formatoptions+=l
set nolist
set path=.,/usr/include,/usr/local/include
set smartcase
set nosmartindent
set smarttab
set tabstop=2
set shiftwidth=4
set expandtab
set showmode
" set complete=.,w,b,t
set textwidth=70
set viminfo='50,\"10000,n~/.viminfo
set wildchar=9
set wildignore+=*.pyc,*.hi,*.o
set wildmode=longest,list,full
set wildmenu
set nocompatible
set hidden
set splitright
set splitbelow
set number
set virtualedit=all
let mapleader = ','
noremap ' `
noremap ` '
nnoremap ; :
vnoremap ; :
set scrolloff=3
nnoremap <C-e> 3<C-e>
nnoremap <C-y> 3<C-y>

" Line numbering settings:
" Function to toggle relative vs absolute line numbering
function! ToggleNumbering()
    if exists("+relativenumber")
        if &relativenumber
            set number
        else
            set relativenumber
        endif
    else
        set number!
    endif
endfunc

" Sane regex syntax
noremap / /\v
noremap ? ?\v

" Autocenter some movement commands
noremap n nzz
noremap N Nzz

" if you forget to sudo..
cmap w!! %!sudo tee > /dev/null %

" Set relative line numbering by default is it exists

" if exists('+relativenumber')
"     set relativenumber
" else
"     set number
" endif


" leader-z to switch between rel/abs line numbering schemes
noremap <silent> <leader>z :call ToggleNumbering()<CR>

" Spacebar removes search highlighting
nnoremap <silent> <space> :nohl<CR>

" Vim Latex stuff
syntax on
filetype plugin on
filetype indent on
let g:tex_flavor='latex'
set grepprg=grep\ -nH\ $*

:autocmd FileType *		set shiftwidth=4
:autocmd FileType xml,html	set shiftwidth=4
:autocmd FileType java,c,cc,cpp	set nocindent
"
" Easy closing of window splits
nnoremap <leader>d <C-w>c

" Enable easy NERDTree toggling
nnoremap <silent> <leader>n :NERDTreeToggle<CR>

"Move a line of text using ALT+[jk], (un)indent with ALT+[hl]
nnoremap <silent> <A-j> :m+<CR>==
nnoremap <silent> <A-k> :m-2<CR>==
nnoremap <A-h> <<
nnoremap <A-l> >>
inoremap <A-j> <Esc>:m+<CR>==gi
inoremap <A-k> <Esc>:m-2<CR>==gi
inoremap <A-h> <Esc><<`]a
inoremap <A-l> <Esc>>>`]a
vnoremap <A-j> :m'>+<CR>gv=gv
vnoremap <A-k> :m-2<CR>gv=gv
vnoremap <A-h> <gv
vnoremap <A-l> >gv
 
" Tab to switch between matching braces
map <Tab> %

" Fix wrapped line behavior
nnoremap j gj
nnoremap k gk

" Highlight cursor line only in active window
au WinEnter * setlocal cursorline
au WinLeave * setlocal nocursorline

" Leaves insert mode after 15 seconds of no input
au CursorHoldI * stopinsert
au InsertEnter * let updaterestore=&updatetime | set updatetime=15000
au InsertLeave * let &updatetime=updaterestore

" taglist and ctags configuration
" let Tlist_Ctags_Cmd = "/usr/bin/ctags"
" let Tlist_WinWidth = 50
map <silent> <leader>q :TagbarToggle<cr>
map <F8> :!/usr/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>
" uses ghci to generate haskell tags file recursively from cwd
map <F9> :!echo ":ctags" \| ghci **/*.hs<CR>
map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Insert mode - map jk to <Esc>
imap jk <Esc>

" convenient file editting for important files
nmap <leader>ev :e ~/.dotfiles/vimrc.linkme<CR>
nmap <leader>ez :e ~/.dotfiles/zshrc.linkme<CR>
nmap <leader>eg :e ~/.dotfiles/gvimrc.linkme<CR>
nmap <leader>s :source ~/.vimrc<CR>:source ~/.gvimrc<CR>

" Make "Y" behavior consistent with 'D','C', etc.
nmap Y y$

" Gundo mappings
map <silent> <leader>u :GundoToggle<CR>

" Buffer next and previous mappings
map <silent> <c-f> :bn<cr>
map <silent> <c-b> :bp<cr>

"Status line gnarliness
set laststatus=2
set statusline=%F%m%r%h%w\ (%{&ff}){%Y}\ [%l,%v][%p%%]%{fugitive#statusline()}

" Fugitive config and Git
autocmd FileType gitcommit DiffGitCached | wincmd L | wincmd p
 
" Create Blank Newlines and stay in Normal mode
nnoremap <silent> zj o<Esc>
nnoremap <silent> zk O<Esc>

filetype plugin indent on
                                         
" CommandT and other buffer navigation settings---------------
let g:CommandTMatchWindowReverse = 1
let g:CommandTMaxHeight = 20

" double percentage sign in command mode is expanded to directory of current file 
cnoremap %% <C-R>=expand('%:h').'/'<cr>

" ,, switches between most recently viewed buffers
nnoremap <leader><leader> <C-^>

" leader-f to search files in project home, leader-F in current file
" dir, leader-r to search files currently open in buffers
map <leader>f :CommandT<cr>
map <leader>F :CommandT %%<cr>
map <leader>r :CommandTBuffer<cr>

" Color scheme for terminal mode
" color desert

" Haskell-mode stuff---------------
au BufEnter *.hs compiler ghc
let g:haddock_browser = "/usr/bin/firefox"
let g:ghc = "/usr/bin/ghc"


" Ultisnips settings
let g:UltiSnipsSnippetDirectories = ["bundle/ultisnips/UltiSnips"]
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"


" Supertab completion stuff---------------
au FileType python set omnifunc=pythoncomplete#Complete
let g:SuperTabDefaultCompletionType = "context"
set completeopt=menuone,longest,preview
let g:SuperTabContextDefaultCompletionType = "<c-x><c-]>"


" Better window navigation
" C-[hjkl] moves to neighboring window or if it doesn't exist then it
" creates it.

function! WinMove(key) 
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) "we havent moved
    if (match(a:key,'[jk]')) "were we going up/down
      wincmd v
    else 
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

nnoremap <silent> <C-h> :call WinMove('h')<CR>
nnoremap <silent> <C-j> :call WinMove('j')<CR>
nnoremap <silent> <C-@> :call WinMove('j')<CR>
nnoremap <silent> <C-k> :call WinMove('k')<CR>
nnoremap <silent> <C-l> :call WinMove('l')<CR>
 
" Add python libraries to path so can use gf on module name to view
" source
python << EOF
import os
import sys
import vim
for p in sys.path:
    if os.path.isdir(p):
        vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
EOF

" use vim to read pdf files text
autocmd BufReadPre *.pdf set ro nowrap
autocmd BufReadPost *.pdf silent %!pdftotext "%" -nopgbrk -layout -q -eol unix -
autocmd BufWritePost *.pdf silent !rm -rf ~/PDF/%
autocmd BufWritePost *.pdf silent !lp -s -d pdffg "%"
autocmd BufWritePost *.pdf silent !until [ -e ~/PDF/% ]; do sleep 1; done
autocmd BufWritePost *.pdf silent !mv ~/PDF/% %:p:h

" No arrow keys allowed
nmap <left>  :3wincmd <<cr>
nmap <right> :3wincmd ><cr>
nmap <up>    :3wincmd +<cr>
nmap <down>  :3wincmd -<cr>
imap <up> <nop>
imap <down> <nop>
imap <left> <nop>
imap <right> <nop>

" <leader>lc - 'location change' to switched pwd of vim to directory
" of current file
nmap <leader>lcd :cd %%<CR>

" Sparkup settings
"let g:sparkupExecuteMapping = '<c-b>'
let g:sparkupNextMapping = '<c-f>'
let g:sparkupPreviousMapping = '<c-b>'

" Quickfix and location list mappings
nmap <silent> <c-p> :cprevious<CR>zvzz
nmap <silent> <c-n> :cnext<CR>zvzz

" Location list mappings primarily for syntastic
nmap <silent> <a-n> :lnext<CR>zvzz
nmap <silent> <a-p> :lprevious<CR>zvzz

" Quickfix functionality
nnoremap <silent> <c-q> :call QuickfixToggle()<cr>

let g:quickfix_is_open = 0

function! QFStateToggle()
  if g:quickfix_is_open
    let g:quickfix_is_open = 0
  else
    let g:quickfix_is_open = 1
  endif
endfunction

let g:quickfix_return_to_window = winnr()

function! QuickfixToggle()
    if g:quickfix_is_open
        cclose
        let g:quickfix_is_open = 0
        execute g:quickfix_return_to_window . "wincmd w"
    else
        let g:quickfix_return_to_window = winnr()
        copen
        let g:quickfix_is_open = 1
    endif
endfunction

" <leader>a to open up ack search
nmap <leader>a :call QFStateToggle()<cr>:Ack! -i 


function! ExtractVariable()
  let name = input("Variable name: ")
  if name == ''
    return
  endif
  " Enter visual mode (not sure why this is needed since we're already in
  " visual mode anyway)
  normal! gv

  " Replace selected text with the variable name
  exec "normal c" . name
  " Define the variable on the line above
  exec "normal! O" . name . " = "
  " Paste the original selected text to be the variable value
  normal! $p
endfunction

function! InlineVariable()
  " Copy the variable under the cursor into the 'a' register
  :let l:tmp_a = @a
  :normal "ayiw
  " Delete variable and equals sign
  :normal 2daW
  " Delete the expression into the 'b' register
  :let l:tmp_b = @b
  :normal "bd$
  " Delete the remnants of the line
  :normal dd
  " Go to the end of the previous line so we can start our search for the
  " usage of the variable to replace. Doing '0' instead of 'k$' doesn't
  " work; I'm not sure why.
  normal k$
  " Find the next occurence of the variable
  exec '/\<' . @a . '\>'
  " Replace that occurence with the text we yanked
  exec ':.s/\<' . @a . '\>/' . @b
  :let @a = l:tmp_a
  :let @b = l:tmp_b
endfunction

nnoremap<leader>vi :call InlineVariable()<cr>
vnoremap <leader>ve :call ExtractVariable()<cr>

" Dont jump on * or #
nmap * *''
nmap # #''

" Easier to type
noremap H ^
noremap L g_

" Fix linewise visual selection of various text objects
" nnoremap VV V
" nnoremap Vit vitVkoj
" nnoremap Vat vatV
" nnoremap Vab vabV
" nnoremap VaB vaBV

" Complete remappings
inoremap <c-f> <c-x><c-f>
inoremap <c-l> <c-x><c-l>

" Emacs bindings in command line mode
cnoremap <c-a> <home>
cnoremap <c-e> <end>
  
" Folding stuff
set foldenable
set foldmethod=indent
set foldlevel=99

function! MyFoldText() 
  let line = getline(v:foldstart)
  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart
  " expand tabs into spaces
  let onetab = strpart(' ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')
  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount)
  return line . '…' . repeat(" ",fillcharcount) . foldedlinecount . '…' . ' '
endfunction 

set foldtext=MyFoldText()

" 'Splint line' - converse to J (join lines)

nnoremap S i<cr><esc><right>
" Dont insert space between joined lines with J, gJ for that behavior
nnoremap J Jx
nnoremap gJ J
"
" Fugitive {{{

nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gci :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>
nnoremap <leader>gl :Shell git gl -18<cr>:wincmd \|<cr>

" }}}

" Scratch {{{

command! ScratchToggle call ScratchToggle()

function! ScratchToggle() " {{{
  if exists("w:is_scratch_window")
    unlet w:is_scratch_window
    exec "q"
  else
    exec "normal! :Sscratch\<cr>\<C-W>J:resize 13\<cr>"
    let w:is_scratch_window = 1
  endif
endfunction " }}}

nnoremap <silent> <leader><tab> :ScratchToggle<cr>

" }}}
"
" Text objects--------------------------------------------------
" Next and Last {{{

" Motion for "next/last object". For example, "din(" would go to the next "()"
" pair and delete its contents.

onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

function! s:NextTextObject(motion, dir)
  let c = nr2char(getchar())

  if c ==# "b"
      let c = "("
  elseif c ==# "B"
      let c = "{"
  elseif c ==# "d"
      let c = "["
  endif

  exe "normal! ".a:dir.c."v".a:motion.c
endfunction

" }}}

" vim-powerline config
let g:Powerline_symbols = 'fancy'
