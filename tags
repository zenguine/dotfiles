!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
<C-G>S	vim/bundle/vim-surround/plugin/surround.vim	/^  imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	vim/bundle/vim-surround/plugin/surround.vim	/^  imap      <C-G>s <Plug>Isurround$/;"	m
<C-S>	vim/bundle/vim-surround/plugin/surround.vim	/^    imap    <C-S> <Plug>Isurround$/;"	m
<C-c><C-c>	vim/bundle/slime/plugin/slime.vim	/^nnoremap <C-c><C-c> "ryap :call Send_to_Screen(@r)<CR>$/;"	m
<C-c><C-c>	vim/bundle/slime/plugin/slime.vim	/^vnoremap <C-c><C-c> "ry :call Send_to_Screen(@r)<CR>$/;"	m
<C-c><C-l>	vim/bundle/slime/plugin/slime.vim	/^nnoremap <C-c><C-l> mpgg"ryG'p :call Send_to_Screen(@r)<CR>$/;"	m
<C-c><CR>	vim/bundle/slime/plugin/slime.vim	/^nnoremap <C-c><CR> :call Send_to_Screen("\\r")<CR>$/;"	m
<C-c>v	vim/bundle/slime/plugin/slime.vim	/^nnoremap <C-c>v :call Screen_Vars()<CR>$/;"	m
<Leader>gA	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>gA :GitAdd <cfile><Enter>$/;"	m
<Leader>gD	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>gD :GitDiff --cached<Enter>$/;"	m
<Leader>ga	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>ga :GitAdd<Enter>$/;"	m
<Leader>gc	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>gc :GitCommit<Enter>$/;"	m
<Leader>gd	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>gd :GitDiff<Enter>$/;"	m
<Leader>gl	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>gl :GitLog<Enter>$/;"	m
<Leader>gp	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>gp :GitPullRebase<Enter>$/;"	m
<Leader>gs	vim/bundle/git-vim/plugin/git.vim	/^    nnoremap <Leader>gs :GitStatus<Enter>$/;"	m
<LocalLeader>.	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>. :call Qualify()<cr>$/;"	m
<LocalLeader>?	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>? :call Haddock()<cr>$/;"	m
<LocalLeader>?1	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>?1 :call HaskellSearchEngine('hoogle')<cr>$/;"	m
<LocalLeader>?2	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>?2 :call HaskellSearchEngine('hayoo!')<cr>$/;"	m
<LocalLeader>??	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>?? :let es=g:haskell_search_engines$/;"	m
<LocalLeader>T	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^map <LocalLeader>T :call GHC_ShowType(1)<cr>$/;"	m
<LocalLeader>ct	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^map <LocalLeader>ct :call GHC_CreateTagfile()<cr>$/;"	m
<LocalLeader>i	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>i :call Import(0,0)<cr>$/;"	m
<LocalLeader>ie	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^map <LocalLeader>ie :call GHC_MkImportsExplicit()<cr>$/;"	m
<LocalLeader>im	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>im :call Import(1,0)<cr>$/;"	m
<LocalLeader>iq	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>iq :call Import(0,1)<cr>$/;"	m
<LocalLeader>iqm	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^map <LocalLeader>iqm :call Import(1,1)<cr>$/;"	m
<LocalLeader>lang	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^    map <LocalLeader>lang :emenu ]LANGUAGES_GHC.$/;"	m
<LocalLeader>lang	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^    map <LocalLeader>lang :popup ]LANGUAGES_GHC<cr>$/;"	m
<LocalLeader>opt	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  map <LocalLeader>opt :emenu ]OPTIONS_GHC.$/;"	m
<LocalLeader>opt	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  map <LocalLeader>opt :popup ]OPTIONS_GHC<cr>$/;"	m
<LocalLeader>si	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^map <LocalLeader>si :call GHC_ShowInfo()<cr>$/;"	m
<LocalLeader>t	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^map <LocalLeader>t :call GHC_ShowType(0)<cr>$/;"	m
<Plug>BufKillAlt	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillAlt         :call <SID>GotoBuffer('#', '')<CR>$/;"	m
<Plug>BufKillBack	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBack        :call <SID>GotoBuffer('bufback', '')<CR>$/;"	m
<Plug>BufKillBangAlt	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBangAlt     :call <SID>GotoBuffer('#', '!')<CR>$/;"	m
<Plug>BufKillBangBack	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBangBack    :call <SID>GotoBuffer('bufback', '!')<CR>$/;"	m
<Plug>BufKillBangBd	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBangBd      :call <SID>BufKill('bd', '!')<CR>$/;"	m
<Plug>BufKillBangBun	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBangBun     :call <SID>BufKill('bun', '!')<CR>$/;"	m
<Plug>BufKillBangBw	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBangBw      :call <SID>BufKill('bw', '!')<CR>$/;"	m
<Plug>BufKillBangForward	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBangForward :call <SID>GotoBuffer('bufforward', '!')<CR>$/;"	m
<Plug>BufKillBd	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBd          :call <SID>BufKill('bd', '')<CR>$/;"	m
<Plug>BufKillBun	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBun         :call <SID>BufKill('bun', '')<CR>$/;"	m
<Plug>BufKillBw	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillBw          :call <SID>BufKill('bw', '')<CR>$/;"	m
<Plug>BufKillForward	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillForward     :call <SID>GotoBuffer('bufforward', '')<CR>$/;"	m
<Plug>BufKillUndo	vim/bundle/bufkill/plugin/bufkill.vim	/^noremap <Plug>BufKillUndo        :call <SID>UndoKill()<CR>$/;"	m
<Plug>Csurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	vim/bundle/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	vim/bundle/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SuperTabBackward	vim/bundle/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=<SID>SuperTab('p')<cr>$/;"	m
<Plug>SuperTabForward	vim/bundle/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=<SID>SuperTab('n')<cr>$/;"	m
<Plug>VSurround	vim/bundle/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	vim/bundle/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>YSsurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	vim/bundle/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<SID>xx	vim/bundle/taglist/plugin/taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
<c-n>	vim/bundle/supertab/plugin/supertab.vim	/^    imap <c-n> <Plug>SuperTabForward$/;"	m
<c-p>	vim/bundle/supertab/plugin/supertab.vim	/^    imap <c-p> <Plug>SuperTabBackward$/;"	m
<c-r><tab>	vim/bundle/snipmate/after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<c-x>	vim/bundle/supertab/plugin/supertab.vim	/^  imap <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<cr>	vim/bundle/supertab/plugin/supertab.vim	/^      inoremap <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
<leader>ca	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        nmap <leader>ca <plug>NERDCommenterAltDelims$/;"	m
<plug>NERDCommenterAlignBoth	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<s-tab>	vim/bundle/snipmate/after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	vim/bundle/snipmate/after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
AR	vim/bundle/command-t/ruby/command-t/Makefile	/^AR = ar$/;"	m
AddLeftDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddRightDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AltMultipart	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
AppendCommentToLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
BA	vim/bundle/bufkill/plugin/bufkill.vim	/^  command -bang BA    :call <SID>GotoBuffer('#',"<bang>")$/;"	c
BB	vim/bundle/bufkill/plugin/bufkill.vim	/^  command -bang BB    :call <SID>GotoBuffer('bufback',"<bang>")$/;"	c
BD	vim/bundle/bufkill/plugin/bufkill.vim	/^  command -bang BD    :call <SID>BufKill('bd',"<bang>")$/;"	c
BF	vim/bundle/bufkill/plugin/bufkill.vim	/^  command -bang BF    :call <SID>GotoBuffer('bufforward',"<bang>")$/;"	c
BINDIR	vim/bundle/command-t/ruby/command-t/Makefile	/^BINDIR        = $(bindir)$/;"	m
BOnly	vim/bundle/vim-bufonly/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BOnly$/;"	c
BUN	vim/bundle/bufkill/plugin/bufkill.vim	/^  command -bang BUN   :call <SID>BufKill('bun',"<bang>")$/;"	c
BUNDO	vim/bundle/bufkill/plugin/bufkill.vim	/^  command -bang BUNDO :call <SID>UndoKill()$/;"	c
BW	vim/bundle/bufkill/plugin/bufkill.vim	/^  command -bang BW    :call <SID>BufKill('bw',"<bang>")$/;"	c
BackwardsSnippet	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
Blame	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Blame(bang,line1,line2,count,args) abort$/;"	f
BlameCommit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:BlameCommit(cmd) abort$/;"	f
BlameJump	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
BlameSyntax	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
Bonly	vim/bundle/vim-bufonly/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bonly$/;"	c
Bookmark.AddBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
Browse	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Browse(bang,line1,count,...) abort$/;"	f
BufKill	vim/bundle/bufkill/plugin/bufkill.vim	/^augroup BufKill$/;"	a
BufKill	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>BufKill(cmd, bang) "{{{1$/;"	f
BufOnly	vim/bundle/vim-bufonly/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang BufOnly$/;"	c
BufOnly	vim/bundle/vim-bufonly/plugin/BufOnly.vim	/^function! BufOnly(buffer, bang)$/;"	f
BufReadIndex	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:BufReadIndex()$/;"	f
BufReadIndexFile	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:BufReadIndexFile()$/;"	f
BufReadObject	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:BufReadObject()$/;"	f
BufWriteIndexFile	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:BufWriteIndexFile()$/;"	f
Buffer	vim/bundle/command-t/spec/command-t/scanner/buffer_scanner_spec.rb	/^  class Buffer; end$/;"	c	class:VIM
BufferFinder	vim/bundle/command-t/ruby/command-t/finder/buffer_finder.rb	/^  class BufferFinder < Finder$/;"	c	class:CommandT
BufferScanner	vim/bundle/command-t/ruby/command-t/scanner/buffer_scanner.rb	/^  class BufferScanner < Scanner$/;"	c	class:CommandT
Bufonly	vim/bundle/vim-bufonly/plugin/BufOnly.vim	/^command! -nargs=? -complete=buffer -bang Bufonly$/;"	c
BuildTabStops	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
CC	vim/bundle/command-t/ruby/command-t/Makefile	/^CC = gcc$/;"	m
CFLAGS	vim/bundle/command-t/ruby/command-t/Makefile	/^CFLAGS   =  -fPIC -fno-strict-aliasing -g -g -O2  -fPIC $(cflags) $/;"	m
CLEANFILES	vim/bundle/command-t/ruby/command-t/Makefile	/^CLEANFILES = mkmf.log$/;"	m
CLEANLIBS	vim/bundle/command-t/ruby/command-t/Makefile	/^CLEANLIBS     = $(TARGET).so $(TARGET).il? $(TARGET).tds $(TARGET).map$/;"	m
CLEANOBJS	vim/bundle/command-t/ruby/command-t/Makefile	/^CLEANOBJS     = *.o *.a *.s[ol] *.pdb *.exp *.bak$/;"	m
COPY	vim/bundle/command-t/ruby/command-t/Makefile	/^COPY = cp$/;"	m
CPPFLAGS	vim/bundle/command-t/ruby/command-t/Makefile	/^CPPFLAGS = -DHAVE_RUBY_H  $(DEFS) $(cppflags)$/;"	m
CXXFLAGS	vim/bundle/command-t/ruby/command-t/Makefile	/^CXXFLAGS = $(CFLAGS) $/;"	m
CamelCase	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! CamelCase(shorthand,string)$/;"	f
CanCommentLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CaptureKeyPresses	vim/bundle/supertab/plugin/supertab.vim	/^function! s:CaptureKeyPresses()$/;"	f
ChooseSnippet	vim/bundle/snipmate/plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
Close	vim/bundle/snipmate/ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CommandLineCompletion	vim/bundle/supertab/plugin/supertab.vim	/^function! s:CommandLineCompletion()$/;"	f
CommandT	vim/bundle/command-t/plugin/command-t.vim	/^command -nargs=? -complete=dir CommandT call <SID>CommandTShowFileFinder(<q-args>)$/;"	c
CommandT	vim/bundle/command-t/ruby/command-t/controller.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/finder.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/finder/buffer_finder.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/finder/file_finder.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/match_window.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/prompt.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/scanner.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/scanner/buffer_scanner.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/settings.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/stub.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/vim.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/vim/path_utilities.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/vim/screen.rb	/^module CommandT$/;"	m
CommandT	vim/bundle/command-t/ruby/command-t/vim/window.rb	/^module CommandT$/;"	m
CommandTAcceptSelection	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelection()$/;"	f
CommandTAcceptSelectionSplit	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelectionSplit()$/;"	f
CommandTAcceptSelectionTab	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelectionTab()$/;"	f
CommandTAcceptSelectionVSplit	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTAcceptSelectionVSplit()$/;"	f
CommandTBackspace	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTBackspace()$/;"	f
CommandTBuffer	vim/bundle/command-t/plugin/command-t.vim	/^command CommandTBuffer call <SID>CommandTShowBufferFinder()$/;"	c
CommandTCancel	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTCancel()$/;"	f
CommandTClear	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTClear()$/;"	f
CommandTCursorEnd	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTCursorEnd()$/;"	f
CommandTCursorLeft	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTCursorLeft()$/;"	f
CommandTCursorRight	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTCursorRight()$/;"	f
CommandTCursorStart	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTCursorStart()$/;"	f
CommandTDelete	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTDelete()$/;"	f
CommandTFlush	vim/bundle/command-t/plugin/command-t.vim	/^command CommandTFlush call <SID>CommandTFlush()$/;"	c
CommandTFlush	vim/bundle/command-t/plugin/command-t.vim	/^function s:CommandTFlush()$/;"	f
CommandTHandleKey	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTHandleKey(arg)$/;"	f
CommandTMatch_initialize	vim/bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_initialize	vim/bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatch_matches	vim/bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_matches	vim/bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_matches(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_score	vim/bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_score(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatch_to_s	vim/bundle/command-t/ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f	signature:(VALUE self)
CommandTMatch_to_s	vim/bundle/command-t/ruby/command-t/match.h	/^extern VALUE CommandTMatch_to_s(VALUE self);$/;"	p	signature:(VALUE self)
CommandTMatcher_initialize	vim/bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_initialize	vim/bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self);$/;"	p	signature:(int argc, VALUE *argv, VALUE self)
CommandTMatcher_matches_for	vim/bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_matches_for	vim/bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev);$/;"	p	signature:(VALUE self, VALUE abbrev)
CommandTMatcher_sorted_matches_for	vim/bundle/command-t/ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTMatcher_sorted_matches_for	vim/bundle/command-t/ruby/command-t/matcher.h	/^extern VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options);$/;"	p	signature:(VALUE self, VALUE abbrev, VALUE options)
CommandTRubyWarning	vim/bundle/command-t/plugin/command-t.vim	/^function s:CommandTRubyWarning()$/;"	f
CommandTSelectNext	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTSelectNext()$/;"	f
CommandTSelectPrev	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTSelectPrev()$/;"	f
CommandTShowBufferFinder	vim/bundle/command-t/plugin/command-t.vim	/^function s:CommandTShowBufferFinder()$/;"	f
CommandTShowFileFinder	vim/bundle/command-t/plugin/command-t.vim	/^function s:CommandTShowFileFinder(arg)$/;"	f
CommandTToggleFocus	vim/bundle/command-t/plugin/command-t.vim	/^function CommandTToggleFocus()$/;"	f
CommandT_option_from_hash	vim/bundle/command-t/ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f	signature:(const char *option, VALUE hash)
CommandT_option_from_hash	vim/bundle/command-t/ruby/command-t/ext.h	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash);$/;"	p	signature:(const char *option, VALUE hash)
CommentBlock	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
Commit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Commit(args) abort$/;"	f
CommitComplete	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
CompleteAux	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! CompleteAux(al,cl,cp)$/;"	f
CompleteFlagHeaders	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  function! CompleteFlagHeaders(al,cl,cp)$/;"	f
CompleteHaddock	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! CompleteHaddock(findstart, base)$/;"	f
CompleteHaddockModules	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! CompleteHaddockModules(al,cl,cp)$/;"	f
CompletionReset	vim/bundle/supertab/plugin/supertab.vim	/^function! s:CompletionReset(char)$/;"	f
ContextCompletion	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ContextCompletion()$/;"	f
ContextDiscover	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ContextDiscover()$/;"	f
ContextText	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ContextText()$/;"	f
Controller	vim/bundle/command-t/ruby/command-t/controller.rb	/^  class Controller$/;"	c	class:CommandT
ConvertLeadingSpacesToTabs	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
Count	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
CountNonESCedOccurances	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CreateDelimMapFromCms	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
CreateMaps	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMenuItems	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
CreateUniqueMapping	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>CreateUniqueMapping(lhs, rhs, ...)$/;"	f
DEFFILE	vim/bundle/command-t/ruby/command-t/Makefile	/^DEFFILE = $/;"	m
DEFS	vim/bundle/command-t/ruby/command-t/Makefile	/^DEFS     = -D_FILE_OFFSET_BITS=64$/;"	m
DISTCLEANFILES	vim/bundle/command-t/ruby/command-t/Makefile	/^DISTCLEANFILES = $/;"	m
DLDFLAGS	vim/bundle/command-t/ruby/command-t/Makefile	/^DLDFLAGS = $(ldflags) $(dldflags) $(archflag)$/;"	m
DLLIB	vim/bundle/command-t/ruby/command-t/Makefile	/^DLLIB = $(TARGET).so$/;"	m
DeHTML	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! DeHTML(entry)$/;"	f
DefineSnips	vim/bundle/snipmate/plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
Detect	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Detect(path)$/;"	f
Diff	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Diff(bang,...) abort$/;"	f
DirComplete	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
DoHighlightGitBlame	vim/bundle/git-vim/plugin/git.vim	/^function! s:DoHighlightGitBlame()$/;"	f
Doc	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! -nargs=+ Doc  call Doc('v',<f-args>)$/;"	c
Doc	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! Doc(kind,qualname,...) $/;"	f
DocBrowser	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! DocBrowser(url)$/;"	f
DocIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! DocIndex call DocIndex()$/;"	c
DocIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! DocIndex()$/;"	f
DocSettings	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! DocSettings call DocSettings()$/;"	c
DocSettings	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! DocSettings()$/;"	f
Doct	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! -nargs=+ Doct call Doc('t',<f-args>)$/;"	c
DoesBlockHaveDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
EXEEXT	vim/bundle/command-t/ruby/command-t/Makefile	/^EXEEXT = $/;"	m
EXTSTATIC	vim/bundle/command-t/ruby/command-t/Makefile	/^EXTSTATIC = $/;"	m
Edit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Edit(cmd,bang,...) abort$/;"	f
EditComplete	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:EditComplete(A,L,P) abort$/;"	f
EditRunComplete	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:EditRunComplete(A,L,P) abort$/;"	f
EnableLongestEnhancement	vim/bundle/supertab/plugin/supertab.vim	/^function! s:EnableLongestEnhancement()$/;"	f
Esc	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
ExecuteInTree	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:ExecuteInTree(cmd) abort$/;"	f
Expand	vim/bundle/git-vim/plugin/git.vim	/^function! s:Expand(expr)$/;"	f
ExpandMap	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ExpandMap(map)$/;"	f
ExportDocIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! ExportDocIndex call ExportDocIndex()$/;"	c
ExportDocIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! ExportDocIndex()$/;"	f
ExtractGitDir	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:ExtractGitDir(path) abort$/;"	f
ExtractSnips	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
FileFinder	vim/bundle/command-t/ruby/command-t/finder/file_finder.rb	/^  class FileFinder < Finder$/;"	c	class:CommandT
FileLimitExceeded	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.FileScanner
FileRead	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:FileRead()$/;"	f
FileScanner	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^  class FileScanner < Scanner$/;"	c	class:CommandT
Filename	vim/bundle/snipmate/autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
FindBoundingLinesOfSexyCom	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindDelimiterIndex	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
FindImportPosition	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! FindImportPosition()$/;"	f
Findcomplete	vim/autoload/pathogen.vim	/^function! s:Findcomplete(A,L,P) " {{{1$/;"	f
Finder	vim/bundle/command-t/ruby/command-t/finder.rb	/^  class Finder$/;"	c	class:CommandT
FinishCommit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:FinishCommit()$/;"	f
FlagReference	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  command! -nargs=1 -complete=customlist,CompleteFlagHeaders FlagReference call FlagReference(<f-args>)$/;"	c
FlagReference	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  function! FlagReference(section)$/;"	f
Formatter	vim/bundle/command-t/spec/vim_formatter.rb	/^    module Formatter$/;"	m	class:Spec.Runner
ForwardBack	vim/bundle/supertab/plugin/supertab.vim	/^  function! s:ForwardBack(command, map)$/;"	f
GF	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GHCReload	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^command! GHCReload call GHC_BrowseAll()$/;"	c
GHCStaticOptions	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^command! GHCStaticOptions call GHC_StaticOptions()$/;"	c
GHC_BrowseAll	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_BrowseAll()$/;"	f
GHC_BrowseBangStar	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_BrowseBangStar(module)$/;"	f
GHC_BrowseMultiple	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_BrowseMultiple(imports,modules)$/;"	f
GHC_CompleteImports	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_CompleteImports(findstart, base)$/;"	f
GHC_CountErrors	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_CountErrors()$/;"	f
GHC_CreateTagfile	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_CreateTagfile()$/;"	f
GHC_HaveTypes	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_HaveTypes()$/;"	f
GHC_Info	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_Info(what)$/;"	f
GHC_LoadConfig	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_LoadConfig()$/;"	f
GHC_MkImportsExplicit	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_MkImportsExplicit()$/;"	f
GHC_NameCurrent	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_NameCurrent()$/;"	f
GHC_Process	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_Process(imports,output)$/;"	f
GHC_ProcessBang	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_ProcessBang(module,output)$/;"	f
GHC_SaveConfig	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_SaveConfig()$/;"	f
GHC_ShowInfo	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_ShowInfo()$/;"	f
GHC_ShowType	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_ShowType(addTypeDecl)$/;"	f
GHC_StaticOptions	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^function! GHC_StaticOptions()$/;"	f
GHC_TypeBalloon	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  function! GHC_TypeBalloon()$/;"	f
GHCi	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^command! -nargs=1 GHCi redraw | echo system(g:ghc. ' ' . b:ghc_staticoptions .' '.expand("%").' -e "'.escape(<f-args>,'"').'"')$/;"	c
GHSearchRepo	vim/bundle/github-search/plugin/github-search.vim	/^com! -nargs=+         GHSearchRepo call GHSearchRepo(<q-args>)$/;"	c
GHSearchRepo	vim/bundle/github-search/plugin/github-search.vim	/^func! GHSearchRepo(query) abort$/;"	f
GHcloneRepo	vim/bundle/github-search/plugin/github-search.vim	/^func! GHcloneRepo(repo) abort$/;"	f
GHfetch	vim/bundle/github-search/plugin/github-search.vim	/^func! GHfetch(query) abort$/;"	f
GHformat	vim/bundle/github-search/plugin/github-search.vim	/^func! GHformat(repo)$/;"	f
GHquery	vim/bundle/github-search/plugin/github-search.vim	/^func! GHquery(q)$/;"	f
GHview	vim/bundle/github-search/plugin/github-search.vim	/^func! GHview(title, headers, results)$/;"	f
GetGitDir	vim/bundle/git-vim/plugin/git.vim	/^function! s:GetGitDir()$/;"	f
GetSexyComLeft	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetSnippet	vim/bundle/snipmate/plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
Git	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Git(bang,cmd) abort$/;"	f
Git	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=+ Git                 call GitDoCommand(<q-args>)$/;"	c
GitAdd	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=? GitAdd              call GitAdd(<q-args>)$/;"	c
GitAdd	vim/bundle/git-vim/plugin/git.vim	/^function! GitAdd(expr)$/;"	f
GitBlame	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=? GitBlame            call GitBlame(<q-args>)$/;"	c
GitBlame	vim/bundle/git-vim/plugin/git.vim	/^function! GitBlame(...)$/;"	f
GitBranch	vim/bundle/git-vim/plugin/git.vim	/^function! GitBranch()$/;"	f
GitCatFile	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=1 GitCatFile          call GitCatFile(<q-args>)$/;"	c
GitCatFile	vim/bundle/git-vim/plugin/git.vim	/^function! GitCatFile(file)$/;"	f
GitCheckout	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=1 -complete=customlist,ListGitCommits GitCheckout call GitCheckout(<q-args>)$/;"	c
GitCheckout	vim/bundle/git-vim/plugin/git.vim	/^function! GitCheckout(args)$/;"	f
GitCommit	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=* GitCommit           call GitCommit(<q-args>)$/;"	c
GitCommit	vim/bundle/git-vim/plugin/git.vim	/^function! GitCommit(args)$/;"	f
GitComplete	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:GitComplete(A,L,P) abort$/;"	f
GitDiff	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=* -complete=customlist,ListGitCommits GitDiff     call GitDiff(<q-args>)$/;"	c
GitDiff	vim/bundle/git-vim/plugin/git.vim	/^function! GitDiff(args)$/;"	f
GitDoCommand	vim/bundle/git-vim/plugin/git.vim	/^function! GitDoCommand(args)$/;"	f
GitLog	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=* GitLog              call GitLog(<q-args>)$/;"	c
GitLog	vim/bundle/git-vim/plugin/git.vim	/^function! GitLog(args)$/;"	f
GitPull	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=* GitPull             call GitPull(<q-args>)$/;"	c
GitPull	vim/bundle/git-vim/plugin/git.vim	/^function! GitPull(args)$/;"	f
GitPullRebase	vim/bundle/git-vim/plugin/git.vim	/^command!          GitPullRebase       call GitPull('--rebase')$/;"	c
GitPush	vim/bundle/git-vim/plugin/git.vim	/^command! -nargs=* GitPush             call GitPush(<q-args>)$/;"	c
GitPush	vim/bundle/git-vim/plugin/git.vim	/^function! GitPush(args)$/;"	f
GitStatus	vim/bundle/git-vim/plugin/git.vim	/^command!          GitStatus           call GitStatus()$/;"	c
GitStatus	vim/bundle/git-vim/plugin/git.vim	/^function! GitStatus()$/;"	f
GitVimDiffMerge	vim/bundle/git-vim/plugin/git.vim	/^command!          GitVimDiffMerge     call GitVimDiffMerge()$/;"	c
GitVimDiffMerge	vim/bundle/git-vim/plugin/git.vim	/^function! GitVimDiffMerge()$/;"	f
GitVimDiffMergeDone	vim/bundle/git-vim/plugin/git.vim	/^command!          GitVimDiffMergeDone call GitVimDiffMergeDone()$/;"	c
GitVimDiffMergeDone	vim/bundle/git-vim/plugin/git.vim	/^function! GitVimDiffMergeDone()$/;"	f
GotoBuffer	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>GotoBuffer(cmd, bang) "{{{1$/;"	f
Grep	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Grep(bang,arg) abort$/;"	f
Haddock	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! Haddock()$/;"	f
HaddockIndexLookup	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! HaddockIndexLookup(name)$/;"	f
HasCStyleComments	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasLeadingTabs	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
HaskellSearchEngine	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! HaskellSearchEngine(engine)$/;"	f
HaveIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! HaveIndex()$/;"	f
HaveModuleIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! HaveModuleIndex()$/;"	f
Helptags	vim/autoload/pathogen.vim	/^command! -bar Helptags :call pathogen#helptags()$/;"	c
HiLink	vim/bundle/haskell.vim/syntax/haskell.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim/bundle/haskell.vim/syntax/haskell.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HpasteEditEntry	vim/bundle/haskellmode-vim/ftplugin/haskell_hpaste.vim	/^command! -nargs=1 HpasteEditEntry call HpasteEditEntry(<f-args>)$/;"	c
HpasteEditEntry	vim/bundle/haskellmode-vim/ftplugin/haskell_hpaste.vim	/^function! HpasteEditEntry(entry)$/;"	f
HpasteIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_hpaste.vim	/^command! HpasteIndex call HpasteIndex()$/;"	c
HpasteIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_hpaste.vim	/^function! HpasteIndex()$/;"	f
IDoc	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! -nargs=+ IDoc call IDoc(<f-args>)$/;"	c
IDoc	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! IDoc(name,...) $/;"	f
INCFLAGS	vim/bundle/command-t/ruby/command-t/Makefile	/^INCFLAGS = -I. -I$(topdir) -I$(hdrdir) -I$(srcdir)$/;"	m
INSTALL	vim/bundle/command-t/ruby/command-t/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	vim/bundle/command-t/ruby/command-t/Makefile	/^INSTALL_DATA = $(INSTALL) -m 644$/;"	m
INSTALL_PROG	vim/bundle/command-t/ruby/command-t/Makefile	/^INSTALL_PROG = $(INSTALL) -m 0755$/;"	m
Import	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! Import(module,qualified)$/;"	f
ImportDocIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! ImportDocIndex call ImportDocIndex()$/;"	c
ImportDocIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! ImportDocIndex()$/;"	f
Init	vim/bundle/supertab/plugin/supertab.vim	/^function! s:Init()$/;"	f
InitBuffer	vim/bundle/supertab/plugin/supertab.vim	/^function! s:InitBuffer()$/;"	f
InitVariable	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
Init_ext	vim/bundle/command-t/ruby/command-t/ext.c	/^void Init_ext()$/;"	f
InvertComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
IsCommented	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEscaped	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsInSexyComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsNumEven	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsSexyComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
JumpInit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:JumpInit() abort$/;"	f
KeyMap.All	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
LDSHARED	vim/bundle/command-t/ruby/command-t/Makefile	/^LDSHARED = $(CC) -shared$/;"	m
LIBPATH	vim/bundle/command-t/ruby/command-t/Makefile	/^LIBPATH =  -L. -L$(libdir)$/;"	m
LIBRUBY	vim/bundle/command-t/ruby/command-t/Makefile	/^LIBRUBY = $(LIBRUBY_SO)$/;"	m
LIBRUBYARG_SHARED	vim/bundle/command-t/ruby/command-t/Makefile	/^LIBRUBYARG_SHARED = -l$(RUBY_SO_NAME)$/;"	m
LIBRUBYARG_STATIC	vim/bundle/command-t/ruby/command-t/Makefile	/^LIBRUBYARG_STATIC = -l$(RUBY_SO_NAME)-static$/;"	m
LIBRUBY_A	vim/bundle/command-t/ruby/command-t/Makefile	/^LIBRUBY_A = lib$(RUBY_SO_NAME)-static.a$/;"	m
LIBS	vim/bundle/command-t/ruby/command-t/Makefile	/^LIBS = $(LIBRUBYARG_SHARED)  -lpthread -lrt -ldl -lcrypt -lm   -lc$/;"	m
LOCAL_LIBS	vim/bundle/command-t/ruby/command-t/Makefile	/^LOCAL_LIBS = $/;"	m
LastIndexOfDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
Left	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Left(...)$/;"	f
LeftMostIndx	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
ListGitBranches	vim/bundle/git-vim/plugin/git.vim	/^function! ListGitBranches(arg_lead, cmd_line, cursor_pos)$/;"	f
ListGitCommits	vim/bundle/git-vim/plugin/git.vim	/^function! ListGitCommits(arg_lead, cmd_line, cursor_pos)$/;"	f
LoadSyntaxRuleFor	vim/bundle/git-vim/plugin/git.vim	/^function! s:LoadSyntaxRuleFor(params)$/;"	f
Log	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Log(cmd,...)$/;"	f
MAKEDIRS	vim/bundle/command-t/ruby/command-t/Makefile	/^MAKEDIRS = mkdir -p$/;"	m
MDoc	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^command! -nargs=1 -complete=customlist,CompleteHaddockModules MDoc call MDoc(<f-args>)$/;"	c
MDoc	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! MDoc(module)$/;"	f
MakeSnip	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
ManualCompletionEnter	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ManualCompletionEnter()$/;"	f
MatchWindow	vim/bundle/command-t/ruby/command-t/match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
MenuController.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
MkHaddockModuleIndex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! MkHaddockModuleIndex()$/;"	f
Move	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Move(force,destination)$/;"	f
MoveComplete	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:MoveComplete(A,L,P)$/;"	f
Multipart	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
NERDComment	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NERDCommenter	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^augroup NERDCommenter$/;"	a
NERDTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeFind	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NerdEcho	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NumLinesInBuf	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
OBJS	vim/bundle/command-t/ruby/command-t/Makefile	/^OBJS = match.o ext.o matcher.o$/;"	m
OpenGitBuffer	vim/bundle/git-vim/plugin/git.vim	/^function! s:OpenGitBuffer(content)$/;"	f
Path.AbsolutePathFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PathUtilities	vim/bundle/command-t/ruby/command-t/vim/path_utilities.rb	/^    module PathUtilities$/;"	m	class:CommandT.VIM
PlaceDelimitersAndInsBetween	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
ProcessFile	vim/bundle/snipmate/plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessHaddockIndexes	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! ProcessHaddockIndexes(location,files)$/;"	f
ProcessHaddockIndexes2	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! ProcessHaddockIndexes2(location,files)$/;"	f
ProcessHaddockIndexes3	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! ProcessHaddockIndexes3(location,files)$/;"	f
ProcessSnippet	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Prompt	vim/bundle/command-t/ruby/command-t/prompt.rb	/^  class Prompt$/;"	c	class:CommandT
Qualify	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^function! Qualify()$/;"	f
RARRAY_LEN	vim/bundle/command-t/ruby/command-t/ruby_compat.h	43;"	d
RARRAY_PTR	vim/bundle/command-t/ruby/command-t/ruby_compat.h	38;"	d
RFLOAT_VALUE	vim/bundle/command-t/ruby/command-t/ruby_compat.h	48;"	d
RM	vim/bundle/command-t/ruby/command-t/Makefile	/^RM = rm -f$/;"	m
RSTRING_LEN	vim/bundle/command-t/ruby/command-t/ruby_compat.h	33;"	d
RSTRING_PTR	vim/bundle/command-t/ruby/command-t/ruby_compat.h	28;"	d
RUBY	vim/bundle/command-t/ruby/command-t/Makefile	/^RUBY = $(ruby)$/;"	m
RUBYARCHDIR	vim/bundle/command-t/ruby/command-t/Makefile	/^RUBYARCHDIR   = $(sitearchdir)$(target_prefix)$/;"	m
RUBYCOMMONDIR	vim/bundle/command-t/ruby/command-t/Makefile	/^RUBYCOMMONDIR = $(sitedir)$(target_prefix)$/;"	m
RUBYLIBDIR	vim/bundle/command-t/ruby/command-t/Makefile	/^RUBYLIBDIR    = $(sitelibdir)$(target_prefix)$/;"	m
RUBY_EXTCONF_H	vim/bundle/command-t/ruby/command-t/Makefile	/^RUBY_EXTCONF_H = $/;"	m
RUBY_INSTALL_NAME	vim/bundle/command-t/ruby/command-t/Makefile	/^RUBY_INSTALL_NAME = ruby1.8$/;"	m
RUBY_SO_NAME	vim/bundle/command-t/ruby/command-t/Makefile	/^RUBY_SO_NAME = ruby1.8$/;"	m
RefreshGitStatus	vim/bundle/git-vim/plugin/git.vim	/^function! s:RefreshGitStatus()$/;"	f
ReleaseKeyPresses	vim/bundle/supertab/plugin/supertab.vim	/^function! s:ReleaseKeyPresses()$/;"	f
ReloadAllSnippets	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! ReloadAllSnippets()$/;"	f
ReloadSnippets	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! ReloadSnippets(ft)$/;"	f
Remove	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Remove(force)$/;"	f
RemoveDelimiters	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveSnippet	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
ReplaceCmd	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:ReplaceCmd(cmd,...) abort$/;"	f
ReplaceDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ResetAllSnippets	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! ResetAllSnippets()$/;"	f
ResetSnippets	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! ResetSnippets(ft)$/;"	f
RestoreScreenState	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
RestoreWindowPos	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>RestoreWindowPos() "{{{1$/;"	f
Right	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:Right(...)$/;"	f
RightMostIndx	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
Runner	vim/bundle/command-t/spec/vim_formatter.rb	/^  module Runner$/;"	m	class:Spec
SHELL	vim/bundle/command-t/ruby/command-t/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHELL	vim/bundle/supertab/Makefile	/^SHELL=\/bin\/bash$/;"	m
SRCS	vim/bundle/command-t/ruby/command-t/Makefile	/^SRCS = match.c ext.c matcher.c$/;"	m
STATIC_LIB	vim/bundle/command-t/ruby/command-t/Makefile	/^STATIC_LIB = $/;"	m
SaveScreenState	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
SaveWindowPos	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>SaveWindowPos() "{{{1$/;"	f
Scanner	vim/bundle/command-t/ruby/command-t/scanner.rb	/^  class Scanner; end$/;"	c	class:CommandT
Screen	vim/bundle/command-t/ruby/command-t/vim/screen.rb	/^    module Screen$/;"	m	class:CommandT.VIM
Screen_Session_Names	vim/bundle/slime/plugin/slime.vim	/^function Screen_Session_Names(A,L,P)$/;"	f
Screen_Vars	vim/bundle/slime/plugin/slime.vim	/^function Screen_Vars()$/;"	f
SelectCompletion	vim/bundle/supertab/plugin/supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
SelectWord	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
Send_to_Screen	vim/bundle/slime/plugin/slime.vim	/^function Send_to_Screen(text)$/;"	f
SetCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SetCompletionType()$/;"	f
SetDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SetDefaultCompletionType()$/;"	f
SetUpForNewFiletype	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
Settings	vim/bundle/command-t/ruby/command-t/settings.rb	/^  class Settings$/;"	c	class:CommandT
ShowAvailableSnips	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
Spec	vim/bundle/command-t/spec/vim_formatter.rb	/^module Spec$/;"	m
StageDiff	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
StageDiffEdit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
StagePatch	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageReloadSeek	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:StageReloadSeek(target,lnum1,lnum2)$/;"	f
StageToggle	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:StageToggle(lnum1,lnum2) abort$/;"	f
Status	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Status() abort$/;"	f
Stub	vim/bundle/command-t/ruby/command-t/stub.rb	/^  class Stub$/;"	c	class:CommandT
SuperTab	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SuperTab(command)$/;"	f
SuperTabAlternateCompletion	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type)$/;"	f
SuperTabHelp	vim/bundle/supertab/plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabHelp	vim/bundle/supertab/plugin/supertab.vim	/^function! s:SuperTabHelp()$/;"	f
SuperTabLongestHighlight	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabLongestHighlight(dir)$/;"	f
SuperTabSetCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabSetCompletionType(type)$/;"	f
SuperTabSetDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type)$/;"	f
SwapOutterMultiPartDelimsForPlaceHolders	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
SystemGit	vim/bundle/git-vim/plugin/git.vim	/^function! s:SystemGit(args)$/;"	f
TARGET	vim/bundle/command-t/ruby/command-t/Makefile	/^TARGET = ext$/;"	m
TARGET_SO	vim/bundle/command-t/ruby/command-t/Makefile	/^TARGET_SO     = $(DLLIB)$/;"	m
TabSpace	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
TagList_IsValid	vim/bundle/taglist/plugin/taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	vim/bundle/taglist/plugin/taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	vim/bundle/taglist/plugin/taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	vim/bundle/taglist/plugin/taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Tlist	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	vim/bundle/taglist/plugin/taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	vim/bundle/taglist/plugin/taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	vim/bundle/taglist/plugin/taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	vim/bundle/taglist/plugin/taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	vim/bundle/taglist/plugin/taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	vim/bundle/taglist/plugin/taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	vim/bundle/taglist/plugin/taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	vim/bundle/taglist/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	vim/bundle/taglist/plugin/taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	vim/bundle/taglist/plugin/taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	vim/bundle/taglist/plugin/taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	vim/bundle/taglist/plugin/taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	vim/bundle/taglist/plugin/taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
TreeDirNode.AbsoluteTreeRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	vim/bundle/snipmate/plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
UnEsc	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
UndoKill	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>UndoKill() "{{{1$/;"	f
UntabbedCol	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
UpdateChangedSnip	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdateLastColumn	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>UpdateLastColumn(event) "{{{1$/;"	f
UpdateList	vim/bundle/bufkill/plugin/bufkill.vim	/^function! <SID>UpdateList(event) "{{{1$/;"	f
UpdatePlaceholderTabStops	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	vim/bundle/snipmate/autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
VIM	vim/bundle/command-t/ruby/command-t/vim.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/command-t/ruby/command-t/vim/path_utilities.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/command-t/ruby/command-t/vim/screen.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/command-t/ruby/command-t/vim/window.rb	/^  module VIM$/;"	m	class:CommandT
VIM	vim/bundle/command-t/spec/command-t/controller_spec.rb	/^module VIM; end$/;"	m
VIM	vim/bundle/command-t/spec/command-t/finder/buffer_finder_spec.rb	/^module VIM; end$/;"	m
VIM	vim/bundle/command-t/spec/command-t/finder/file_finder_spec.rb	/^module VIM; end$/;"	m
VIM	vim/bundle/command-t/spec/command-t/scanner/buffer_scanner_spec.rb	/^module VIM$/;"	m
VIM	vim/bundle/command-t/spec/command-t/scanner/file_scanner_spec.rb	/^module VIM; end$/;"	m
VPATH	vim/bundle/command-t/ruby/command-t/Makefile	/^VPATH = $(srcdir):$(topdir):$(hdrdir)$/;"	m
Ve	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Ve       :execute s:find(<count>,'edit<bang>',<q-args>,0)$/;"	c
Vedit	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Vedit    :execute s:find(<count>,'edit<bang>',<q-args>,0)$/;"	c
VimFormatter	vim/bundle/command-t/spec/vim_formatter.rb	/^      class VimFormatter < BaseTextFormatter$/;"	c	class:Spec.Runner.Formatter
Vopen	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Vopen    :execute s:find(<count>,'edit<bang>',<q-args>,1)$/;"	c
Vpedit	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Vpedit   :execute s:find(<count>,'pedit',<q-args>,<bang>1)$/;"	c
Vread	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Vread    :execute s:find(<count>,'read',<q-args>,<bang>1)$/;"	c
Vsplit	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Vsplit   :execute s:find(<count>,'split',<q-args>,<bang>1)$/;"	c
Vtabedit	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Vtabedit :execute s:find(<count>,'tabedit',<q-args>,<bang>1)$/;"	c
Vvsplit	vim/autoload/pathogen.vim	/^command! -bar -bang -count=1 -nargs=1 -complete=customlist,s:Findcomplete Vvsplit  :execute s:find(<count>,'vsplit',<q-args>,<bang>1)$/;"	c
WillComplete	vim/bundle/supertab/plugin/supertab.vim	/^function! s:WillComplete()$/;"	f
Window	vim/bundle/command-t/ruby/command-t/vim/window.rb	/^    class Window$/;"	c	class:CommandT.VIM
Wq	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Wq(force,...) abort$/;"	f
Write	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:Write(force,...) abort$/;"	f
X	vim/colors/jellybeans.vim	/^fun! s:X(group, fg, bg, attr, lcfg, lcbg)$/;"	f
__anon1::abbrev_len	vim/bundle/command-t/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
__anon1::abbrev_p	vim/bundle/command-t/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:	access:public
__anon1::always_show_dot_files	vim/bundle/command-t/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
__anon1::dot_file	vim/bundle/command-t/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:	access:public
__anon1::max_score_per_char	vim/bundle/command-t/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:	access:public
__anon1::never_show_dot_files	vim/bundle/command-t/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
__anon1::str_len	vim/bundle/command-t/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
__anon1::str_p	vim/bundle/command-t/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:	access:public
abbrev_len	vim/bundle/command-t/ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
abbrev_p	vim/bundle/command-t/ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:	access:public
abbrev_segments	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
accept_selection	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller
activateNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add!	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
add_methods	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_paths_for_directory	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.FileScanner
alternate	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let alternate = field.'doc\/html\/'$/;"	v
always_show_dot_files	vim/bundle/command-t/ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
arch	vim/bundle/command-t/ruby/command-t/Makefile	/^arch = i686-linux$/;"	m
archdir	vim/bundle/command-t/ruby/command-t/Makefile	/^archdir = $(rubylibdir)\/$(arch)$/;"	m
archflag	vim/bundle/command-t/ruby/command-t/Makefile	/^archflag = $/;"	m
b:current_syntax	vim/bundle/haskell.vim/syntax/haskell.vim	/^let b:current_syntax = "haskell"$/;"	v
b:ghc_staticoptions	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  let b:ghc_staticoptions = ''$/;"	v
b:ghc_types	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  let b:ghc_types = {}$/;"	v
b:my_changedtick	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  let b:my_changedtick = b:changedtick$/;"	v
backspace	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller
backspace!	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
beep	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
bindMappings	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bindir	vim/bundle/command-t/ruby/command-t/Makefile	/^bindir = $(exec_prefix)\/bin$/;"	m
bookmarkNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buffer	vim/bundle/command-t/spec/command-t/scanner/buffer_scanner_spec.rb	/^  def buffer name$/;"	f
buffer	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer(...) abort$/;"	f
buffer_commit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_commit() dict abort$/;"	f
buffer_compare_age	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_compare_age(commit) dict abort$/;"	f
buffer_containing_commit	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_containing_commit() dict abort$/;"	f
buffer_expand	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_expand(rev) dict abort$/;"	f
buffer_getline	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
buffer_getvar	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_name	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_path	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_path(...) dict abort$/;"	f
buffer_repo	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_rev	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_rev() dict abort$/;"	f
buffer_setvar	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_sha1	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_sha1() dict abort$/;"	f
buffer_spec	vim/bundle/fugitive/plugin/fugitive.vim	/^  function! s:buffer_spec() dict abort$/;"	f
buffer_type	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
build_quietly	vim/bundle/command-t/multi-spec.sh	/^function build_quietly()$/;"	f
cCommandTMatch	vim/bundle/command-t/ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	vim/bundle/command-t/ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
cancel	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller
centerView	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
cfiles	vim/bundle/command-t/Makefile	/^cfiles      := $(shell find ruby -name '*.c')$/;"	m
chCwd	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
changesurround	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
cheaders	vim/bundle/command-t/Makefile	/^cheaders    := $(shell find ruby -name '*.h')$/;"	m
checkForActivate	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
check_ruby_1_9_2	vim/bundle/command-t/spec/command-t/controller_spec.rb	/^  def check_ruby_1_9_2$/;"	f
clear	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def clear$/;"	f	class:CommandT.Controller
clear	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow
clear!	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clearBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
close	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
closeChildren	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
closematch	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
color	vim/colors/jellybeans.vim	/^fun! s:color(r, g, b)$/;"	f
colors_name	vim/colors/herald.vim	/^let colors_name = "herald"$/;"	v
colors_name	vim/colors/jellybeans.vim	/^let colors_name = "jellybeans"$/;"	v
colors_name	vim/colors/moria.vim	/^let colors_name = "moria"$/;"	v
colors_name	vim/colors/wombat.vim	/^let colors_name = "wombat"$/;"	v
colors_name	vim/colors/xoria256.vim	/^let colors_name = "xoria256"$/;"	v
command	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:command(definition) abort$/;"	f
comp_alpha	vim/bundle/command-t/ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
comp_score	vim/bundle/command-t/ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f	signature:(const void *a, const void *b)
compareBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compatibility_check	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:compatibility_check()$/;"	f
completeBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
cr	vim/bundle/supertab/plugin/supertab.vim	/^      let cr = (map =~? '\\(^\\|[^)]\\)<cr>')$/;"	v
createTreeWin	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
cs	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
ctrl_n	vim/bundle/supertab/plugin/supertab.vim	/^    let ctrl_n = substitute(ctrl_n, '<', '<lt>', 'g')$/;"	v
ctrl_n	vim/bundle/supertab/plugin/supertab.vim	/^  let ctrl_n = maparg('<c-n>', 'i')$/;"	v
ctrl_p	vim/bundle/supertab/plugin/supertab.vim	/^    let ctrl_p = substitute(ctrl_p, '<', '<lt>', 'g')$/;"	v
ctrl_p	vim/bundle/supertab/plugin/supertab.vim	/^  let ctrl_p = maparg('<c-p>', 'i')$/;"	v
current_compiler	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^let current_compiler = "ghc"$/;"	v
cursor_end	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller
cursor_end	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_left	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller
cursor_left	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_right	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller
cursor_right	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_start	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller
cursor_start	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
datadir	vim/bundle/command-t/ruby/command-t/Makefile	/^datadir = $(datarootdir)$/;"	m
datarootdir	vim/bundle/command-t/ruby/command-t/Makefile	/^datarootdir = $(prefix)\/share$/;"	m
default_open_command	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller
define_commands	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:define_commands()$/;"	f
delete	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def delete$/;"	f	class:CommandT.Controller
delete!	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
deleteBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
depends	vim/bundle/command-t/Makefile	/^depends     := $(shell find ruby -name depend)$/;"	m
did_hs_syntax_inits	vim/bundle/haskell.vim/syntax/haskell.vim	/^    let did_hs_syntax_inits = 1$/;"	v
diff_window_count	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:diff_window_count()$/;"	f
diffoff	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:diffoff()$/;"	f
diffoff_all	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:diffoff_all(dir)$/;"	f
diffthis	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:diffthis()$/;"	f
displayHelp	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
dispose	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
dldflags	vim/bundle/command-t/ruby/command-t/Makefile	/^dldflags = $/;"	m
docdir	vim/bundle/command-t/ruby/command-t/Makefile	/^docdir = $(datarootdir)\/doc\/$(PACKAGE)$/;"	m
dosurround	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
dot_file	vim/bundle/command-t/ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:	access:public
ds	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dumpHelp	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dump_failure	vim/bundle/command-t/spec/vim_formatter.rb	/^        def dump_failure counter, failure$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_pending	vim/bundle/command-t/spec/vim_formatter.rb	/^        def dump_pending; end$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dump_summary	vim/bundle/command-t/spec/vim_formatter.rb	/^        def dump_summary duration, example_count, failure_count, pending_count$/;"	f	class:Spec.Runner.Formatter.VimFormatter
dvidir	vim/bundle/command-t/ruby/command-t/Makefile	/^dvidir = $(docdir)$/;"	m
echo	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
ensure_appropriate_window_selection	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def ensure_appropriate_window_selection$/;"	f	class:CommandT.Controller
ensure_cache_under_limit	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^    def ensure_cache_under_limit$/;"	f	class:CommandT.FileScanner
escape_for_single_quotes	vim/bundle/command-t/ruby/command-t/vim.rb	/^    def self.escape_for_single_quotes str$/;"	F	class:CommandT.VIM
exec	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
exec_prefix	vim/bundle/command-t/ruby/command-t/Makefile	/^exec_prefix = $(prefix)$/;"	m
exists?	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def exists? name$/;"	f	class:CommandT.Controller
extout	vim/bundle/command-t/ruby/command-t/Makefile	/^extout = $/;"	m
extout_prefix	vim/bundle/command-t/ruby/command-t/Makefile	/^extout_prefix = $/;"	m
extractafter	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
field	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let field = substitute(field,'\\\\','\/','g')$/;"	v
field	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let field = substitute(field,'haddock-html: \\(.*\\)lib\\(raries\\)\\?.base.*$','\\1','')$/;"	v
find	vim/autoload/pathogen.vim	/^function! s:find(count,cmd,file,lcd) " {{{1$/;"	f
find	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
findAndRevealPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
firstUsableWindow	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixindent	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
flush	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def flush$/;"	f	class:CommandT.Controller
flush	vim/bundle/command-t/ruby/command-t/finder.rb	/^    def flush$/;"	f	class:CommandT.Finder
flush	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^    def flush$/;"	f	class:CommandT.FileScanner
fnameescape	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
focus	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
fugitive	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#buffer	vim/bundle/fugitive/plugin/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#reload_status	vim/bundle/fugitive/plugin/fugitive.vim	/^function! fugitive#reload_status() abort$/;"	f
fugitive#repo	vim/bundle/fugitive/plugin/fugitive.vim	/^function! fugitive#repo(...)$/;"	f
fugitive#statusline	vim/bundle/fugitive/plugin/fugitive.vim	/^function! fugitive#statusline(...)$/;"	f
fugitive_blame	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_files	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive_files$/;"	a
fugitive_remove	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive_remove$/;"	a
fugitive_temp	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive_temp$/;"	a
fugitive_utility	vim/bundle/fugitive/plugin/fugitive.vim	/^augroup fugitive_utility$/;"	a
function	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:function(name) abort$/;"	f
g:BufKillActionWhenBufferDisplayedInAnotherWindow	vim/bundle/bufkill/plugin/bufkill.vim	/^  let g:BufKillActionWhenBufferDisplayedInAnotherWindow = 'confirm'$/;"	v
g:BufKillCommandWhenLastBufferKilled	vim/bundle/bufkill/plugin/bufkill.vim	/^  let g:BufKillCommandWhenLastBufferKilled = 'enew'$/;"	v
g:BufKillFunctionSelectingValidBuffersToDisplay	vim/bundle/bufkill/plugin/bufkill.vim	/^  let g:BufKillFunctionSelectingValidBuffersToDisplay = 'buflisted'$/;"	v
g:BufKillOverrideCtrlCaret	vim/bundle/bufkill/plugin/bufkill.vim	/^  let g:BufKillOverrideCtrlCaret = 0$/;"	v
g:BufKillVerbose	vim/bundle/bufkill/plugin/bufkill.vim	/^  let g:BufKillVerbose = 1$/;"	v
g:NERDCustomDelimiters	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    let g:NERDCustomDelimiters = {}$/;"	v
g:NERDTreeBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:SuperTabCompletionContexts	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabCrClosePreview	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabCrClosePreview = 0$/;"	v
g:SuperTabCrMapping	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabCrMapping = 1$/;"	v
g:SuperTabDefaultCompletionType	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestEnhanced	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabNoCompleteAfter	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['\\s']$/;"	v
g:SuperTabNoCompleteAfter	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteBefore	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	vim/bundle/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabRetainCompletionDuration	vim/bundle/supertab/plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:colors_name	vim/colors/molokai.vim	/^let g:colors_name="molokai"$/;"	v
g:colors_name	vim/colors/zenburn.vim	/^let g:colors_name="zenburn"$/;"	v
g:command_t_loaded	vim/bundle/command-t/plugin/command-t.vim	/^let g:command_t_loaded = 1$/;"	v
g:did_ft	vim/bundle/snipmate/plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:fugitive_git_executable	vim/bundle/fugitive/plugin/fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	vim/bundle/fugitive/plugin/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:ghc_pkg	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let g:ghc_pkg = substitute(g:ghc,'\\(.*\\)ghc','\\1ghc-pkg','')$/;"	v
g:git_author_highlight	vim/bundle/git-vim/plugin/git.vim	/^    let g:git_author_highlight = { }$/;"	v
g:git_bin	vim/bundle/git-vim/plugin/git.vim	/^    let g:git_bin = 'git'$/;"	v
g:git_bufhidden	vim/bundle/git-vim/plugin/git.vim	/^    let g:git_bufhidden = ''$/;"	v
g:git_command_edit	vim/bundle/git-vim/plugin/git.vim	/^    let g:git_command_edit = 'new'$/;"	v
g:git_highlight_blame	vim/bundle/git-vim/plugin/git.vim	/^    let g:git_highlight_blame = 0$/;"	v
g:github_search_path_format	vim/bundle/github-search/plugin/github-search.vim	/^  let g:github_search_path_format = '~\/src\/:author\/:project'$/;"	v
g:haddock_browser_callformat	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^      let g:haddock_browser_callformat = '%s %s '.printf(&shellredir,'\/dev\/null').' &'$/;"	v
g:haddock_browser_callformat	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^      let g:haddock_browser_callformat = '%s %s'$/;"	v
g:haddock_browser_callformat	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let g:haddock_browser_callformat = 'start %s "%s"'$/;"	v
g:haddock_index	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let g:haddock_index = {}$/;"	v
g:haddock_moduleindex	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let g:haddock_moduleindex = {}$/;"	v
g:haskell_functions	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^let g:haskell_functions = "ghc"$/;"	v
g:haskell_search_engines	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let g:haskell_search_engines = $/;"	v
g:loaded_fugitive	vim/bundle/fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	vim/bundle/nerdtree/nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_pathogen	vim/autoload/pathogen.vim	/^let g:loaded_pathogen = 1$/;"	v
g:loaded_surround	vim/bundle/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:wget	vim/bundle/haskellmode-vim/ftplugin/haskell_hpaste.vim	/^    let g:wget = "!c:\\\\cygwin\\\\bin\\\\wget -q"$/;"	v
g:wget	vim/bundle/haskellmode-vim/ftplugin/haskell_hpaste.vim	/^    let g:wget = "!wget -q"$/;"	v
g:zenburn_alternate_Error	vim/colors/zenburn.vim	/^    let g:zenburn_alternate_Error = 0$/;"	v
g:zenburn_alternate_Include	vim/colors/zenburn.vim	/^    let g:zenburn_alternate_Include = 0$/;"	v
g:zenburn_alternate_Visual	vim/colors/zenburn.vim	/^    let g:zenburn_alternate_Visual = 0$/;"	v
g:zenburn_color_also_Ignore	vim/colors/zenburn.vim	/^    let g:zenburn_color_also_Ignore = 0$/;"	v
g:zenburn_disable_ctags_highlighting_support	vim/colors/zenburn.vim	/^    let g:zenburn_disable_ctags_highlighting_support = 0$/;"	v
g:zenburn_force_dark_Background	vim/colors/zenburn.vim	/^    let g:zenburn_force_dark_Background = 0$/;"	v
g:zenburn_high_Contrast	vim/colors/zenburn.vim	/^    let g:zenburn_high_Contrast = 0$/;"	v
g:zenburn_old_Visual	vim/colors/zenburn.vim	/^    let g:zenburn_old_Visual = 0$/;"	v
g:zenburn_unified_CursorColumn	vim/colors/zenburn.vim	/^    let g:zenburn_unified_CursorColumn = 0$/;"	v
getPath	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getTreeWinNum	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_bool	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller
get_bool	vim/bundle/command-t/ruby/command-t/settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_cursor_highlight	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow
get_list_or_string	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def get_list_or_string name$/;"	f	class:CommandT.Controller
get_number	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller
get_number	vim/bundle/command-t/ruby/command-t/settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_string	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller
getchar	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
github_url	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:github_url(repo,url,rev,commit,path,type,line1,line2) abort$/;"	f
grey_color	vim/colors/jellybeans.vim	/^fun! s:grey_color(n)$/;"	f
grey_level	vim/colors/jellybeans.vim	/^fun! s:grey_level(n)$/;"	f
grey_number	vim/colors/jellybeans.vim	/^fun! s:grey_number(x)$/;"	f
gsub	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
handleMiddleMouse	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_key	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller
has_syntax	vim/bundle/command-t/ruby/command-t/vim.rb	/^    def self.has_syntax?$/;"	F	class:CommandT.VIM
haskellmode#GHC	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#GHC()$/;"	f
haskellmode#GHC_Version	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#GHC_Version()$/;"	f
haskellmode#GHC_VersionGE	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#GHC_VersionGE(target)$/;"	f
haskellmode#GatherImport	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#GatherImport(lineno)$/;"	f
haskellmode#GatherImports	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#GatherImports()$/;"	f
haskellmode#GetNameSymbol	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#GetNameSymbol(line,col,off)$/;"	f
haskellmode#ListElem	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#ListElem(list,elem)$/;"	f
haskellmode#ListIntersect	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#ListIntersect(list1,list2)$/;"	f
haskellmode#ListUnion	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#ListUnion(list1,list2)$/;"	f
haskellmode#ListWithout	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#ListWithout(list1,list2)$/;"	f
haskellmode#MergeImport	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#MergeImport(entry,line,hiding,explicit,module)$/;"	f
haskellmode#UrlEncode	vim/bundle/haskellmode-vim/autoload/haskellmode.vim	/^function! haskellmode#UrlEncode(string)$/;"	f
hdrdir	vim/bundle/command-t/ruby/command-t/Makefile	/^hdrdir = $(topdir)$/;"	m
hide	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide_cursor	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow
hs_minlines	vim/bundle/haskell.vim/syntax/haskell.vim	/^  let hs_minlines = 50$/;"	v
htmldir	vim/bundle/command-t/ruby/command-t/Makefile	/^htmldir = $(docdir)$/;"	m
includedir	vim/bundle/command-t/ruby/command-t/Makefile	/^includedir = $(prefix)\/include$/;"	m
indentLevelFor	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
infodir	vim/bundle/command-t/ruby/command-t/Makefile	/^infodir = $(prefix)\/share\/info$/;"	m
initNerdTree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
initialize	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	vim/bundle/command-t/ruby/command-t/finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	vim/bundle/command-t/ruby/command-t/finder/buffer_finder.rb	/^    def initialize$/;"	f	class:CommandT.BufferFinder
initialize	vim/bundle/command-t/ruby/command-t/finder/file_finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileFinder
initialize	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileScanner
initialize	vim/bundle/command-t/ruby/command-t/settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
inputreplacement	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
instaweb_url	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:instaweb_url(repo,rev,commit,path,type,...) abort$/;"	f
isTreeOpen	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
jumpToChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
ldflags	vim/bundle/command-t/ruby/command-t/Makefile	/^ldflags  = -L. -Wl,-Bsymbolic-functions -rdynamic -Wl,-export-dynamic$/;"	m
leave	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def leave$/;"	f	class:CommandT.Controller
leave	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def leave$/;"	f	class:CommandT.MatchWindow
libdir	vim/bundle/command-t/ruby/command-t/Makefile	/^libdir = $(exec_prefix)\/lib$/;"	m
libexecdir	vim/bundle/command-t/ruby/command-t/Makefile	/^libexecdir = $(prefix)\/lib\/ruby1.8$/;"	m
libpath	vim/bundle/command-t/ruby/command-t/Makefile	/^libpath = . $(libdir)$/;"	m
lines	vim/bundle/command-t/ruby/command-t/vim/screen.rb	/^      def self.lines$/;"	F	class:CommandT.VIM.Screen
linkup	setup	/^function linkup {$/;"	f
list_matches	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
loaded_bufkill	vim/bundle/bufkill/plugin/bufkill.vim	/^let loaded_bufkill = 1$/;"	v
loaded_nerd_comments	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	vim/bundle/snipmate/plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
loaded_taglist	vim/bundle/taglist/plugin/taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	vim/bundle/taglist/plugin/taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	vim/bundle/taglist/plugin/taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	vim/bundle/taglist/plugin/taglist.vim	/^let loaded_taglist = 'available'$/;"	v
localedir	vim/bundle/command-t/ruby/command-t/Makefile	/^localedir = $(datarootdir)\/locale$/;"	m
localstatedir	vim/bundle/command-t/ruby/command-t/Makefile	/^localstatedir = $(DESTDIR)\/var$/;"	m
location1a	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let location1a = s:ghc_libdir . '\/doc\/html\/'$/;"	v
location1b	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let location1b = s:ghc_libdir . '\/doc\/'$/;"	v
location2	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let location2 = '\/usr\/share\/doc\/ghc-' . haskellmode#GHC_Version() . '\/html\/' $/;"	v
lock	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow
mCommandT	vim/bundle/command-t/ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
mandir	vim/bundle/command-t/ruby/command-t/Makefile	/^mandir = $(prefix)\/share\/man$/;"	m
map	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
map	vim/bundle/supertab/plugin/supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
map	vim/bundle/supertab/plugin/supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
maplocalleader	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  let maplocalleader='_'$/;"	v
maplocalleader	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let maplocalleader='_'$/;"	v
match_for	vim/bundle/command-t/spec/command-t/match_spec.rb	/^  def match_for path, pattern$/;"	f
match_limit	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
match_text_for_idx	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
matches=	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matchinfo_t	vim/bundle/command-t/ruby/command-t/match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon1	file:
max_score_per_char	vim/bundle/command-t/ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:	access:public
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
missing	vim/bundle/command-t/ruby/command-t/extconf.rb	/^def missing item$/;"	f
move_cursor_to_selected_line	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def move_cursor_to_selected_line$/;"	f	class:CommandT.MatchWindow
never_show_dot_files	vim/bundle/command-t/ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:	access:public
nextBufferName	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
oldincludedir	vim/bundle/command-t/ruby/command-t/Makefile	/^oldincludedir = $(DESTDIR)\/usr\/include$/;"	m
openBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_selection	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
opfunc	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
padding_for_selected_match	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow
path=	vim/bundle/command-t/ruby/command-t/finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path_excluded?	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.FileScanner
pathogen#cycle_filetype	vim/autoload/pathogen.vim	/^function! pathogen#cycle_filetype() " {{{1$/;"	f
pathogen#glob	vim/autoload/pathogen.vim	/^function! pathogen#glob(pattern) abort " {{{1$/;"	f
pathogen#glob_directories	vim/autoload/pathogen.vim	/^function! pathogen#glob_directories(pattern) abort " {{{1$/;"	f
pathogen#helptags	vim/autoload/pathogen.vim	/^function! pathogen#helptags() " {{{1$/;"	f
pathogen#infect	vim/autoload/pathogen.vim	/^function! pathogen#infect(...) abort " {{{1$/;"	f
pathogen#is_disabled	vim/autoload/pathogen.vim	/^function! pathogen#is_disabled(path) " {{{1$/;"	f
pathogen#join	vim/autoload/pathogen.vim	/^function! pathogen#join(...) abort " {{{1$/;"	f
pathogen#legacyjoin	vim/autoload/pathogen.vim	/^function! pathogen#legacyjoin(...) abort " {{{1$/;"	f
pathogen#runtime_append_all_bundles	vim/autoload/pathogen.vim	/^function! pathogen#runtime_append_all_bundles(...) " {{{1$/;"	f
pathogen#runtime_findfile	vim/autoload/pathogen.vim	/^function! pathogen#runtime_findfile(file,count) "{{{1$/;"	f
pathogen#runtime_prepend_subdirectories	vim/autoload/pathogen.vim	/^function! pathogen#runtime_prepend_subdirectories(path) " {{{1$/;"	f
pathogen#separator	vim/autoload/pathogen.vim	/^function! pathogen#separator() abort " {{{1$/;"	f
pathogen#split	vim/autoload/pathogen.vim	/^function! pathogen#split(path) abort " {{{1$/;"	f
pathogen#uniq	vim/autoload/pathogen.vim	/^function! pathogen#uniq(list) abort " {{{1$/;"	f
paths	vim/bundle/command-t/ruby/command-t/scanner/buffer_scanner.rb	/^    def paths$/;"	f	class:CommandT.BufferScanner
paths	vim/bundle/command-t/ruby/command-t/scanner/file_scanner.rb	/^    def paths$/;"	f	class:CommandT.FileScanner
pdfdir	vim/bundle/command-t/ruby/command-t/Makefile	/^pdfdir = $(docdir)$/;"	m
prefix	vim/bundle/command-t/ruby/command-t/Makefile	/^prefix = $(DESTDIR)\/usr$/;"	m
preload	vim/bundle/command-t/ruby/command-t/Makefile	/^preload = $/;"	m
previewNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_error	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_match	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow
print_matches	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow
print_no_such_file_or_directory	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
process	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
promptToDelBuffer	vim/bundle/nerdtree/nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
psdir	vim/bundle/command-t/ruby/command-t/Makefile	/^psdir = $(docdir)$/;"	m
putCursorInTreeWin	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
pwd	vim/bundle/command-t/ruby/command-t/vim.rb	/^    def self.pwd$/;"	F	class:CommandT.VIM
recall	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:recall()$/;"	f
recursive_match	vim/bundle/command-t/ruby/command-t/match.c	/^double recursive_match(matchinfo_t *m,  \/\/ sharable meta-data$/;"	f	signature:(matchinfo_t *m, long str_idx, long abbrev_idx, long last_idx, double score)
redraw	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
redraw	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
refreshCurrent	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
register_for_key_presses	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
reindent	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relative_path_under_working_directory	vim/bundle/command-t/ruby/command-t/vim/path_utilities.rb	/^      def relative_path_under_working_directory path$/;"	f	class:CommandT.VIM.PathUtilities
relativize_path	vim/bundle/command-t/spec/vim_formatter.rb	/^        def relativize_path path$/;"	f	class:Spec.Runner.Formatter.VimFormatter
renderBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
repo	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo(...) abort$/;"	f
repo_aliases	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_aliases() dict abort$/;"	f
repo_bare	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_config	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_config(conf) dict abort$/;"	f
repo_dir	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_dirglob	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_dirglob(base) dict abort$/;"	f
repo_git_chomp	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head_ref	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_head_ref() dict abort$/;"	f
repo_keywordprg	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_keywordprg() dict abort$/;"	f
repo_rev_parse	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_translate(spec) dict abort$/;"	f
repo_tree	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
repo_user	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
restore	vim/bundle/command-t/ruby/command-t/settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restoreScreenState	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restore_window_dimensions	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
revealBookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rgb	vim/colors/jellybeans.vim	/^fun! s:rgb(rgb)$/;"	f
rgb_color	vim/colors/jellybeans.vim	/^fun! s:rgb_color(x, y, z)$/;"	f
rgb_level	vim/colors/jellybeans.vim	/^fun! s:rgb_level(n)$/;"	f
rgb_number	vim/colors/jellybeans.vim	/^fun! s:rgb_number(x)$/;"	f
ruby	vim/bundle/command-t/ruby/command-t/Makefile	/^ruby = \/usr\/bin\/ruby1.8$/;"	m
ruby_inspect	vim/bundle/command-t/ruby/command-t/ext.h	36;"	d
ruby_operators	vim/colors/herald.vim	/^let ruby_operators = 1$/;"	v
ruby_version	vim/bundle/command-t/ruby/command-t/Makefile	/^ruby_version = 1.8$/;"	m
rubyfiles	vim/bundle/command-t/Makefile	/^rubyfiles   := $(shell find ruby -name '*.rb')$/;"	m
rubylibdir	vim/bundle/command-t/ruby/command-t/Makefile	/^rubylibdir = $(libdir)\/ruby\/$(ruby_version)$/;"	m
s:Bookmark	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:GHC_CachedConfig	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^let s:GHC_CachedConfig = haskellmode#GHC_VersionGE([6,8]) && GHC_LoadConfig()$/;"	v
s:KeyMap	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:MenuController	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDFileNameEscape	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTreeBufName	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:Path	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Tlist_Skip_Refresh	vim/bundle/taglist/plugin/taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:abstract_prototype	vim/bundle/fugitive/plugin/fugitive.vim	/^let s:abstract_prototype = {}$/;"	v
s:buffer_prototype	vim/bundle/fugitive/plugin/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:choices	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let s:choices=[]$/;"	v
s:commands	vim/bundle/fugitive/plugin/fugitive.vim	/^let s:commands = []$/;"	v
s:contents	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:contents      = join(readfile(s:flagref))$/;"	v
s:cpo_save	vim/bundle/taglist/plugin/taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:delimiterMap	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^    let s:delimiterMap[ft] = g:NERDCustomDelimiters[ft]$/;"	v
s:delimiterMap	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:did_snip_helper	vim/bundle/snipmate/ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	vim/bundle/snipmate/after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:docdir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:docdir = alternate$/;"	v
s:docdir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:docdir = field$/;"	v
s:docdir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:docdir = location1a$/;"	v
s:docdir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:docdir = location1b$/;"	v
s:docdir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:docdir = location2$/;"	v
s:docdir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:docdir = g:haddock_docdir$/;"	v
s:done_bundles	vim/autoload/pathogen.vim	/^let s:done_bundles = ''$/;"	v
s:escape_chars	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>[]"$/;"	v
s:escape_chars	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:flagheaderids	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:flagheaderids[s:title] = s:id$/;"	v
s:flagheaderids	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:flagheaderids = {}$/;"	v
s:flagheaders	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:flagheaders            = add(s:flagheaders, s:title)$/;"	v
s:flagheaders	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:flagheaders   = []$/;"	v
s:flagref	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let s:flagref = s:guide . 'flag-reference.html'$/;"	v
s:ghc_libdir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:ghc_libdir = substitute(system(g:ghc . ' --print-libdir'),'\\n','','')$/;"	v
s:ghc_supported_languages	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^    let s:ghc_supported_languages = sort(split(system(g:ghc . ' --supported-languages'),'\\n'))$/;"	v
s:ghc_templates	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^let s:ghc_templates = ["module _ () where","class _ where","class _ => _ where","instance _ where","instance _ => _ where","type family _","type instance _ = ","data _ = ","newtype _ = ","type _ = "]$/;"	v
s:guide	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let s:guide             = s:docdir . 'users_guide\/'$/;"	v
s:haddock_indexfile	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let s:haddock_indexfile = s:haddock_indexfiledir . 'haddock_index.vim'$/;"	v
s:haddock_indexfiledir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:haddock_indexfiledir = $HOME.'\/'$/;"	v
s:haddock_indexfiledir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:haddock_indexfiledir = g:haddock_indexfiledir $/;"	v
s:haddock_indexfiledir	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:haddock_indexfiledir = s:libraries$/;"	v
s:headerPat	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:headerPat     = '.\\{-}<h3 class="title"><a name="\\([^"]*\\)"><\\\/a>\\([^<]*\\)<\\\/h3>\\(.*\\)'$/;"	v
s:index	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let s:index             = 'index.html'$/;"	v
s:lenSpaceStr	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:libraries	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let s:libraries         = s:docdir . 'libraries\/'$/;"	v
s:low_color	vim/colors/jellybeans.vim	/^  let s:low_color = 0$/;"	v
s:low_color	vim/colors/jellybeans.vim	/^  let s:low_color = 1$/;"	v
s:menu_char_prefix	vim/bundle/taglist/plugin/taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:ml	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^    let s:ml = matchlist(s:r,s:headerPat)$/;"	v
s:ml	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^  let s:ml = matchlist(s:contents,s:headerPat)$/;"	v
s:modes	vim/bundle/supertab/plugin/supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	vim/bundle/supertab/plugin/supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:molokai_original	vim/colors/molokai.vim	/^    let s:molokai_original = 0$/;"	v
s:molokai_original	vim/colors/molokai.vim	/^    let s:molokai_original = g:molokai_original$/;"	v
s:moria_fontface	vim/colors/moria.vim	/^    let s:moria_fontface = "plain"$/;"	v
s:moria_fontface	vim/colors/moria.vim	/^    let s:moria_fontface = g:moria_fontface$/;"	v
s:moria_monochrome	vim/colors/moria.vim	/^    let s:moria_monochrome = 0$/;"	v
s:moria_monochrome	vim/colors/moria.vim	/^    let s:moria_monochrome = g:moria_monochrome$/;"	v
s:moria_style	vim/colors/moria.vim	/^    let s:moria_style = &background $/;"	v
s:moria_style	vim/colors/moria.vim	/^    let s:moria_style = &background$/;"	v
s:moria_style	vim/colors/moria.vim	/^    let s:moria_style = g:moria_style$/;"	v
s:next_buffer_number	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:old_cpo	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:opts	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^    let s:opts = filter(split(substitute(system(g:ghc . ' -v0 --interactive', ':set'), '  ', '','g'), '\\n'), 'v:val =~ "-f"')$/;"	v
s:opts	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^  let s:opts = ["-fglasgow-exts","-fallow-undecidable-instances","-fallow-overlapping-instances","-fno-monomorphism-restriction","-fno-mono-pat-binds","-fno-cse","-fbang-patterns","-funbox-strict-fields"]$/;"	v
s:opts	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^let s:opts = sort(s:opts)$/;"	v
s:repo_prototype	vim/bundle/fugitive/plugin/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	vim/bundle/fugitive/plugin/fugitive.vim	/^let s:repos = {}$/;"	v
s:running_windows	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	vim/bundle/bufkill/plugin/bufkill.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim/bundle/supertab/plugin/supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:scriptname	vim/bundle/haskellmode-vim/compiler/ghc.vim	/^let s:scriptname = "ghc.vim"$/;"	v
s:scriptname	vim/bundle/haskellmode-vim/ftplugin/haskell_doc.vim	/^let s:scriptname = "haskell_doc.vim"$/;"	v
s:snippets	vim/bundle/snipmate/plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:spaceStr	vim/bundle/nerdcommenter/plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:tabHelp	vim/bundle/supertab/plugin/supertab.vim	/^  let s:tabHelp =$/;"	v
s:temp_files	vim/bundle/fugitive/plugin/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:tlist_app_name	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	vim/bundle/taglist/plugin/taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	vim/bundle/taglist/plugin/taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	vim/bundle/taglist/plugin/taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~▾▸ ]\\+'$/;"	v
s:tree_up_dir_line	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:types	vim/bundle/supertab/plugin/supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	vim/bundle/supertab/plugin/supertab.vim	/^  let s:types =$/;"	v
sanitize_path_string	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller
save	vim/bundle/command-t/ruby/command-t/settings.rb	/^    def save$/;"	f	class:CommandT.Settings
saveScreenState	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
sbindir	vim/bundle/command-t/ruby/command-t/Makefile	/^sbindir = $(exec_prefix)\/sbin$/;"	m
select	vim/bundle/command-t/ruby/command-t/vim/window.rb	/^      def self.select window$/;"	F	class:CommandT.VIM.Window
select_next	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller
select_next	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_prev	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller
select_prev	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
selection	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
set_bool	vim/bundle/command-t/ruby/command-t/settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_number	vim/bundle/command-t/ruby/command-t/settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_status	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_up_file_finder	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def set_up_file_finder$/;"	f	class:CommandT.Controller
set_up_max_height	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def set_up_max_height$/;"	f	class:CommandT.Controller
setupStatusline	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
sharedstatedir	vim/bundle/command-t/ruby/command-t/Makefile	/^sharedstatedir = $(prefix)\/com$/;"	m
shellesc	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellslash	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:shellslash(path)$/;"	f
show	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def show$/;"	f	class:CommandT.Controller
showMenu	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
show_buffer_finder	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def show_buffer_finder$/;"	f	class:CommandT.Controller
show_cursor	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow
show_file_finder	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def show_file_finder$/;"	f	class:CommandT.Controller
sitearch	vim/bundle/command-t/ruby/command-t/Makefile	/^sitearch = i686-linux$/;"	m
sitearchdir	vim/bundle/command-t/ruby/command-t/Makefile	/^sitearchdir = $(sitelibdir)\/$(sitearch)$/;"	m
sitedir	vim/bundle/command-t/ruby/command-t/Makefile	/^sitedir = $(DESTDIR)\/usr\/local\/lib\/site_ruby$/;"	m
sitelibdir	vim/bundle/command-t/ruby/command-t/Makefile	/^sitelibdir = $(sitedir)\/$(ruby_version)$/;"	m
snipMate#expandSnip	vim/bundle/snipmate/autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	vim/bundle/snipmate/autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	vim/bundle/snipmate/plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
sorted_matches_for	vim/bundle/command-t/ruby/command-t/finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
srcdir	vim/bundle/command-t/ruby/command-t/Makefile	/^srcdir = .$/;"	m
str_len	vim/bundle/command-t/ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:	access:public
str_p	vim/bundle/command-t/ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:	access:public
stripMarkupFromLine	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
stub_finder	vim/bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_finder(sorted_matches=[])$/;"	f
stub_match_window	vim/bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_match_window(selection)$/;"	f
stub_prompt	vim/bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_prompt(abbrev='')$/;"	f
stub_vim	vim/bundle/command-t/spec/command-t/controller_spec.rb	/^  def stub_vim(working_directory)$/;"	f
sub	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
sysconfdir	vim/bundle/command-t/ruby/command-t/Makefile	/^sysconfdir = $(DESTDIR)\/etc$/;"	m
tabpagevar	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
target_prefix	vim/bundle/command-t/ruby/command-t/Makefile	/^target_prefix = $/;"	m
throw	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:throw(string) abort$/;"	f
toggle	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
toggle_focus	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller
topdir	vim/bundle/command-t/ruby/command-t/Makefile	/^topdir = \/usr\/lib\/ruby\/1.8\/i686-linux$/;"	m
treeExistsForBuf	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
truncated_match	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow
txtfiles	vim/bundle/command-t/Makefile	/^txtfiles    := $(shell find doc -name '*.txt')$/;"	m
unfocus	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	vim/bundle/command-t/ruby/command-t/prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
unique	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unload	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def unload$/;"	f	class:CommandT.Controller
unload	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def unload$/;"	f	class:CommandT.MatchWindow
unlock	vim/bundle/command-t/ruby/command-t/match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow
upDir	vim/bundle/nerdtree/plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
vendorarchdir	vim/bundle/command-t/ruby/command-t/Makefile	/^vendorarchdir = $(vendorlibdir)\/$(sitearch)$/;"	m
vendordir	vim/bundle/command-t/ruby/command-t/Makefile	/^vendordir = $(libdir)\/ruby\/vendor_ruby$/;"	m
vendorlibdir	vim/bundle/command-t/ruby/command-t/Makefile	/^vendorlibdir = $(vendordir)\/$(ruby_version)$/;"	m
vimfiles	vim/bundle/command-t/Makefile	/^vimfiles    := $(shell find plugin -name '*.vim')$/;"	m
vt100?	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def vt100?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
warn	vim/bundle/command-t/ruby/command-t/stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
warn	vim/bundle/fugitive/plugin/fugitive.vim	/^function! s:warn(str)$/;"	f
wrap	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrapreg	vim/bundle/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
xterm?	vim/bundle/command-t/ruby/command-t/controller.rb	/^    def xterm?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
yS	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
ys	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	vim/bundle/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
zenburn_ctags	vim/colors/zenburn.vim	/^    let _zenburn_ctags = 1$/;"	v
