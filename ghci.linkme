:m - Prelude
:m + GOA
findPosixLambdabot >>= setLambdabotHome

:def bs        lambdabot "botsnack"
:def pl        lambdabot "pl"
:def unpl      lambdabot "unpl"
:def unmtl     lambdabot "unmtl"
:def redo      lambdabot "redo"
:def undo      lambdabot "undo"
:def index     lambdabot "index"
:def docs      lambdabot "docs"
:def instances lambdabot "instances"
:def lbhoogle  lambdabot "hoogle"
:def source    lambdabot "source"
:def where     lambdabot "where"
:def version   lambdabot "version"
:def src       lambdabot "src"

:set prompt "Î»: "
:m + Control.Monad Control.Applicative Control.Monad.Error Control.Monad.State Control.Monad.Reader Control.Monad.Writer Control.Lens
let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg ++ "'"
:def! search return . (":! hoogle --count=15 " ++) . ghciEscapeShellArg
:def! doc return . (":! hoogle --info " ++) . ghciEscapeShellArg
:def! searchc return . (":! hoogle --color --count=15 " ++) . ghciEscapeShellArg
:def! docc return . (":! hoogle --color --info " ++) . ghciEscapeShellArg
:set +t
:seti -XNoMonomorphismRestriction
:seti -XDataKinds
:seti -XPolyKinds
:seti -XGADTs
:seti -XRankNTypes
:seti -XTypeOperators
