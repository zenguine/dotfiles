:m - Prelude

:set prompt "Î»: "
:m + Control.Monad Control.Applicative Control.Lens 
let ghciEscapeShellArg arg = "'" ++ concatMap (\c -> if c == '\'' then "'\"'\"'" else [c]) arg ++ "'"
:def! search return . (":! hoogle --count=15 " ++) . ghciEscapeShellArg
:def! doc return . (":! hoogle --info " ++) . ghciEscapeShellArg
:def! searchc return . (":! hoogle --color --count=15 " ++) . ghciEscapeShellArg
:def! docc return . (":! hoogle --color --info " ++) . ghciEscapeShellArg
:set +t
:seti -XNoMonomorphismRestriction
:seti -XDataKinds
:seti -XGADTs
:seti -XRankNTypes
:seti -XTypeOperators
:set -XNoOverloadedLists

import qualified Data.Traversable as T
import qualified Data.Foldable as F
import Data.Foldable (Foldable(..))
import Data.Traversable (Traversable(..))
import Data.Bifunctor
import Data.Profunctor
import qualified Control.Arrow as A
import Control.Arrow (Arrow(..), (&&&), (|||), (***), (+++))